geom_bar(position = "stack") +
scale_fill_manual(values = c("#03bb85", "#ff0000")) +
theme_minimal() +
labs(x = "Temperatura (°C)",
y = "Número de lanzamientos",
fill = "¿Accidente?") +
theme(axis.title.x = element_text(size = 15, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
axis.text.x = element_text(size = 9, angle = 45, hjust = 1),
axis.text.y = element_text(size = 12),
legend.position = "bottom")
#| message: false
#| warning: false
lanz_rec <-  recipe(data = challenger_data, accident ~ .)
#| message: false
#| warning: false
log_reg <- logistic_reg() |> set_engine("glm")
#| message: false
#| warning: false
lanz_flow <- workflow() |> add_model(log_reg) |> add_recipe(lanz_rec)
#| message: false
#| warning: false
lanz_fit <- lanz_flow |> fit(data = challenger_data)
#| message: false
#| warning: false
predicciones <- augment(lanz_fit, new_data = challenger_data) |> mutate(odds = .pred_1 / .pred_0, log.odds = log(odds))
lanz_fit |> extract_fit_engine() |> coef()
#| message: false
#| warning: false
exp(coef(lanz_fit |> extract_fit_engine()))
#| code-fold: true
#| message: false
#| warning: false
# Ploteado
ggplot(predicciones, aes(x = temp, y = .pred_1,
color = factor(accident, labels = c("No", "Sí")),
shape = factor(.pred_class, labels = c("No", "Sí")))) +
geom_point(size = 5) +
scale_color_manual(values = c("#03bb85","#ff8097"))+
labs(x = "Temperatura", y = "Probabilidad de accidente",
color = "Realidad", shape = "Predicción",
title = "Ajuste de la regresión logística")+
theme_minimal()+
theme(axis.title.y = element_blank(),
axis.title.x = element_text(size =15, face = "bold"),
axis.text.x = element_text(size =9),
axis.text.y = element_text(size =12, face = "bold"),
plot.title = element_text(size =20, face = "bold"),
legend.position = "bottom")
confusion <- confusionMatrix(factor(predicciones_clase),
factor(challenger_data$accident, levels = c("No", "Yes")))
confusion <- confusionMatrix(factor(predicciones),
factor(challenger_data$accident, levels = c("No", "Yes")))
confusion <- confusionMatrix(factor(predicciones$pred_class),
factor(challenger_data$accident, levels = c("No", "Yes")))
confusion <- confusionMatrix(factor(predicciones$pred_class),
factor(challenger_data$accident)
confusion <- confusionMatrix(factor(predicciones$pred_class),
factor(challenger_data$accident))
confusion <- confusionMatrix(predicciones$pred_class,
challenger_data$accident)
confusion <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident)
confusion <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident)
confusion
confusion <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident,positive = 1)
confusion <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident,positive = "0")
confusion
confusion <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident,positive = "accident")
confusion <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident,positive = "0")
confusion
confusion <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "0")
confusion
# Accuracy
accuracy_value <- conf_mat[["overall"]][["Accuracy"]]
conf_mat <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "0")
conf_mat
# Accuracy
accuracy_value <- conf_mat[["overall"]][["Accuracy"]]
# Sensitivity
sensitivity_value <- conf_mat[["byClass"]][["Sensitivity"]]
# Specificity
specificity_value <- conf_mat[["byClass"]][["Specificity"]]
conf_mat <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "accident")
conf_mat <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "0")
conf_mat
# Accuracy
accuracy_value <- conf_mat[["overall"]][["Accuracy"]]
# Sensitivity
sensitivity_value <- conf_mat[["byClass"]][["Sensitivity"]]
# Specificity
specificity_value <- conf_mat[["byClass"]][["Specificity"]]
conf_mat <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "1")
conf_mat
# Accuracy
accuracy_value <- conf_mat[["overall"]][["Accuracy"]]
# Sensitivity
sensitivity_value <- conf_mat[["byClass"]][["Sensitivity"]]
# Specificity
specificity_value <- conf_mat[["byClass"]][["Specificity"]]
conf_mat <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "1")
conf_mat
# Accuracy
accuracy_value <- conf_mat[["overall"]][["Accuracy"]]
# Sensitivity
sensitivity_value <- conf_mat[["byClass"]][["Sensitivity"]]
# Specificity
specificity_value <- conf_mat[["byClass"]][["Specificity"]]
conf_mat <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "1")
conf_mat
# Accuracy
accuracy_value <- conf_mat[["overall"]][["Accuracy"]]
# Sensitivity
sensitivity_value <- conf_mat[["byClass"]][["Sensitivity"]]
# Specificity
specificity_value <- conf_mat[["byClass"]][["Specificity"]]
conf_mat <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "0")
conf_mat
# Accuracy
accuracy_value <- conf_mat[["overall"]][["Accuracy"]]
# Sensitivity
sensitivity_value <- conf_mat[["byClass"]][["Sensitivity"]]
# Specificity
specificity_value <- conf_mat[["byClass"]][["Specificity"]]
conf_mat <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "1")
conf_mat
# Accuracy
accuracy_value <- conf_mat[["overall"]][["Accuracy"]]
# Sensitivity
sensitivity_value <- conf_mat[["byClass"]][["Sensitivity"]]
# Specificity
specificity_value <- conf_mat[["byClass"]][["Specificity"]]
conf_mat <- confusionMatrix(predicciones$.pred_class,
challenger_data$accident, positive = "1")
conf_mat
# Accuracy
accuracy_value <- conf_mat[["overall"]][["Accuracy"]]
# Sensitivity
sensitivity_value <- conf_mat[["byClass"]][["Sensitivity"]]
# Specificity
specificity_value <- conf_mat[["byClass"]][["Specificity"]]
#| code-fold: true
#| message: false
#| warning: false
#yearsatcompany
#yearsincurrentrole
#yearssincelastpromotion
#yearswithcurrmanager
dataset_attrition |> ggplot( aes(x=as.factor(1), y=monthlyincome, fill = "#023047" )) +
geom_violin(width = 1) +
stat_boxplot(geom = "errorbar", width = 0.15,color = "#C2185B") +
geom_boxplot(width=0.2, color="#C2185B", alpha = 1 ) +
scale_fill_manual(values = c("#023047")) +
labs(title = "Distribución variable age",
subtitle = "Gráfico de violin y boxplot")+
theme_minimal()+
theme(axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_blank(),
legend.position = "None",
plot.title = element_text(size = 20, face = "bold")
)
knitr::include_graphics("./img/ictus_grande.jpg")
#| code-fold: true
#| message: false
#| warning: false
rm(list = ls())
library(tidyverse)  # Depuración datos
library(skimr)      # Resumen numérico
library(outliers)   # Outliers
library(ggplot2)    # Gráficos
library(tidymodels) # Modelos
library(rpart)      # CART
library(rpart.plot) # Graficar árbol
library(caret)      # Matriz de Confusion
library(glue)       # pegar texto + variables fácilmente
library(DT)         # Para mostrar tabla (formatStyle)
library(ROSE)       # Para Oversampling
library(yardstick)  # Cómo funcionan modelos
library(forcats)    # Para factores
library(solitude) # Isolation Forest
library(mice) # Imputar RF
library(modeest) # Para moda
library(stratification) # Dalenius
library(fastDummies) # Dummies
library(rsample) # Para particion Train/Test
# Combinar gráficos
library(egg)
library(ggimage)
library(ggpubr)
library(hrbrthemes)
library(ggthemes)
#| message: false
#| warning: false
dataset_attrition <- read.csv(file = "./data/watson_healthcare_modified.csv")
#| message: false
#| warning: false
dataset_attrition$Attrition <- factor(dataset_attrition$Attrition)
is.factor(dataset_attrition$Attrition)
levels(dataset_attrition$Attrition)
#| message: false
#| warning: false
names(dataset_attrition)
names(dataset_attrition) <- str_to_lower(names(dataset_attrition))
#| code-fold: true
#| message: false
#| warning: false
#|
dataset_attrition |> group_by(attrition) |> summarise(nAttrition = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |> ggplot(aes(x = attrition, y = nAttrition, fill = attrition)) +
geom_col(position = "dodge", alpha = 0.8) +
geom_text(aes(label = paste(nAttrition," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5) +
ylim(0,1500)+
scale_fill_manual(values = c("#4ec475","#f23849")) +
labs(title = "Distribución de la variable objetivo",
subtitle = "Reparto de niveles de la variable objetivo (attrition)")+
theme_minimal()+
theme(plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
dataset_attrition |> skim()
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
mutate(over18 = ifelse(over18 == "Y","Yes","No")) |>
group_by(over18) |>
summarise(nOver18 = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = over18, y = nOver18, fill = over18))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(nOver18," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,2000) + scale_fill_manual(values = c("#4ec475")) + labs(title = "Distribución de la variable over18")+
theme_minimal()+
theme(plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
dataset_attrition = select(dataset_attrition, -over18)
dataset_attrition = select(dataset_attrition, -employeecount)
dataset_attrition = select(dataset_attrition, -standardhours)
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(overtime) |>
summarise(nOvertime = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = overtime, y = nOvertime, fill = overtime))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(nOvertime," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1300) + labs(title = "Distribución de la variable overtime")+
theme_minimal()+
theme(plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
dataset_attrition <- dataset_attrition |> mutate(overtime = ifelse(overtime == "Yes",1,0))
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(maritalstatus) |>
summarise(nMaritalStatus = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = maritalstatus, y = nMaritalStatus, fill = maritalstatus))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(nMaritalStatus," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1300) + labs(title = "Distribución de la variable maritalstatus")+
theme_minimal()+
theme(plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
#| code-fold: true
#| message: false
#| warning: false
# Apuntamos tasas
attrition_married <-  round(min(dataset_attrition |> group_by(maritalstatus) |> count(attrition) |>  mutate(attrition_ratio = 100*n/sum(n)) |> ungroup() |>
filter(maritalstatus == "Married" & attrition == "Yes") |> select(attrition_ratio)),2)
attrition_single <-  round(min(dataset_attrition |> group_by(maritalstatus) |> count(attrition) |>  mutate(attrition_ratio = 100*n/sum(n)) |> ungroup() |>
filter(maritalstatus == "Single" & attrition == "Yes") |> select(attrition_ratio)),2)
attrition_divorced <-  round(min(dataset_attrition |> group_by(maritalstatus) |> count(attrition) |>  mutate(attrition_ratio = 100*n/sum(n)) |> ungroup() |>
filter(maritalstatus == "Divorced" & attrition == "Yes") |> select(attrition_ratio)),2)
dataset_attrition |> group_by(maritalstatus) |> count(attrition) |>  mutate(attrition_ratio = 100*n/sum(n)) |>
ggplot(aes(x = maritalstatus, y = attrition_ratio, fill = attrition))+
geom_col()+
coord_flip()+
annotate("text", x = 2, y= 11, label= paste(attrition_married,"%", sep =""),size = 4 ,fontface = "bold") +
annotate("text", x = 3, y= 11, label= paste(attrition_single,"%", sep =""),size = 4 ,fontface = "bold") +
annotate("text", x = 1, y= 11, label= paste(attrition_divorced,"%", sep =""),size = 4 ,fontface = "bold") +
theme_minimal()+
theme(axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.y = element_text(size = 12, face = "bold"),
legend.position = "None"
)
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(jobrole) |>
summarise(njobrole = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = jobrole, y = njobrole, fill = jobrole))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(njobrole," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1300) + labs(title = "Distribución de la variable jobrole")+
theme_minimal()+
theme(plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
filter(jobrole %in% c("Administrative", "Admin", "Nurse", "Other","Therapist")) |>
group_by(jobrole) |>
summarise(
avg_salary = mean(monthlyincome, na.rm = TRUE)
) |> ggplot(aes(x = jobrole, y = avg_salary, fill = avg_salary)) +
geom_col(position = "dodge", alpha = 0.8) +
ylim(0,18000) +
labs(title = "Salario medio por rol",
subtitle = "Salario medio de los empleados por los diferentes roles dentro de la empresa")+
theme_minimal()+
theme(plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
#| code-fold: true
#| message: false
#| warning: false
admin_departments <- dataset_attrition |> group_by(department) |> count(jobrole) |> filter(jobrole == "Admin") |>
ungroup() |> mutate(percentage = (n / sum(n)) * 100)
plot1 <- ggplot(admin_departments, aes(x = department, y = percentage, fill = department)) +
geom_bar(stat = "identity") +
labs(
title = "Admin por departamento (%)"
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.title.x =element_blank(),
legend.position = "none")
administrative_departments <- dataset_attrition |> group_by(department) |> count(jobrole) |> filter(jobrole == "Administrative") |> ungroup() |> mutate(percentage = (n / sum(n)) * 100)
plot2 <- ggplot(administrative_departments, aes(x = department, y = percentage, fill = department)) +
geom_bar(stat = "identity") +
labs(
title = "Administrativo por departamento (%)"
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.title.x =element_blank(),
legend.position = "none")
grid.arrange(plot1, plot2, ncol = 2)
dataset_attrition <- dataset_attrition |> mutate(jobrole = ifelse(jobrole == "Admin","Administrative", jobrole))
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(jobrole) |>
summarise(njobrole = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = jobrole, y = njobrole, fill = jobrole))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(njobrole," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1300) + labs(title = "Distribución de la variable jobrole modificada")+
theme_minimal()+
theme(plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(businesstravel) |>
summarise(nBusinessTravel = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = businesstravel, y = nBusinessTravel, fill = businesstravel))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(nBusinessTravel," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1200) + labs(title = "Distribución de la variable businesstravel")+
theme_minimal()+
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
dataset_attrition <- dataset_attrition |> mutate(businesstravel = ifelse(businesstravel == "Non-Travel",0,1))
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(businesstravel) |>
summarise(nBusinessTravel = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = as.factor(businesstravel), y = nBusinessTravel, fill = as.factor(businesstravel))) +
geom_col(position = "dodge", alpha = 1) +
geom_text(aes(label = paste(nBusinessTravel," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1600) +
labs(title = "Distribución de la variable businesstravel modificada") +
theme_minimal()+
theme(plot.title = element_text(size = 15, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(educationfield) |>
summarise(neducationfield = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = educationfield, y = neducationfield, fill = educationfield))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(neducationfield," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1200) + labs(title = "Distribución de la variable educationfield")+
theme_minimal()+
theme(plot.title = element_text(size = 20, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 9, face = "bold"),
legend.position = "None")
dataset_attrition <- dataset_attrition |>
mutate(educationfield = case_when(
educationfield %in% c("Human Resources", "Marketing") ~ "Social sciences",
educationfield %in% c("Life Sciences", "Medical") ~ "Life sciences",
educationfield == "Technical Degree" ~ "Technological sciences",
TRUE ~ educationfield # Mantener el resto como están (other)
))
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(educationfield) |>
summarise(neducationfield = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = educationfield, y = neducationfield, fill = educationfield))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(neducationfield," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1250) + labs(title = "Distribución de la variable educationfield modificada")+
theme_minimal()+
theme(plot.title = element_text(size = 16, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 10, face = "bold"),
legend.position = "None")
#| code-fold: true
#| message: false
#| warning: false
plot_gender <- dataset_attrition |>
group_by(gender) |>
summarise(nGender = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = gender, y = nGender, fill = gender))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(nGender," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1000) + labs(title = "Distribución de la variable gender")+
theme_minimal()+
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 10, face = "bold"),
legend.position = "None")
plot_department <- dataset_attrition |>
group_by(department) |>
summarise(nDepartment = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = department, y = nDepartment, fill = department))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(nDepartment," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,1000) + labs(title = "Distribución de la variable department")+
theme_minimal()+
theme(plot.title = element_text(size = 12, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 10, face = "bold"),
legend.position = "None")
grid.arrange(plot_gender, plot_department, ncol = 2)
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(joblevel) |>
summarise(nJobLevel = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = as.factor(joblevel), y = nJobLevel, fill = as.factor(joblevel)))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(nJobLevel," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,650) + labs(title = "Distribución de la variable joblevel")+
theme_minimal()+
theme(plot.title = element_text(size = 16, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
#| code-fold: true
#| message: false
#| warning: false
dataset_attrition |>
group_by(shift) |>
summarise(nShift = n(), Porc = round(n()*100/nrow(dataset_attrition),2)) |>
ggplot(aes(x = as.factor(shift), y = nShift, fill = as.factor(shift)))  + geom_col(position = "dodge", alpha = 0.8) + geom_text(aes(label = paste(nShift," (",Porc,"%)")),colour = "black", size = 3.5,vjust = -0.5)+ ylim(0,750) + labs(title = "Distribución de la variable shift")+
theme_minimal()+
theme(plot.title = element_text(size = 16, face = "bold"),
axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_text(size = 12, face = "bold"),
legend.position = "None")
#| code-fold: true
#| message: false
#| warning: false
#yearsatcompany
#yearsincurrentrole
#yearssincelastpromotion
#yearswithcurrmanager
dataset_attrition |> ggplot( aes(x=as.factor(1), y=monthlyincome, fill = "#023047" )) +
geom_violin(width = 1) +
stat_boxplot(geom = "errorbar", width = 0.15,color = "#C2185B") +
geom_boxplot(width=0.2, color="#C2185B", alpha = 1 ) +
scale_fill_manual(values = c("#023047")) +
labs(title = "Distribución variable age",
subtitle = "Gráfico de violin y boxplot")+
theme_minimal()+
theme(axis.title.y = element_blank(),
axis.title.x =element_blank(),
axis.text.x = element_blank(),
legend.position = "None",
plot.title = element_text(size = 20, face = "bold")
)
