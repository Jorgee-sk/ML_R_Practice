)
#| code-fold: true
# basic scatterplot
ggplot(scores, aes(x=Dim.2, y=Dim.4)) +
geom_point()+ # Show dots
geom_text(
label= scores$Pais,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
# Covarianzas y correlaciones sin estandarizar antes (solo numéricas)
cov(iris_tb[, -5])
cor(iris_tb[, -5])
#| message: false
#| warning: false
corrplot.mixed(cor(iris_tb[, -5]), order = 'AOE', tl.col = "black")
# PCA
pca_fit <- PCA(iris_tb[, -5], scale.unit = TRUE, ncp = 4, graph = FALSE)
# Autovalores
pca_fit$eig
# Autovalores
get_eig(pca_fit)
#| message: false
#| warning: false
# Varianza explicada (autovalores)
fviz_eig(pca_fit,
addlabels = TRUE,                            # Añadir el % de varianza explicada
barfill = "#669DA6",                         # Color relleno
barcolor = "#E32986",                        # Color contorno
xlab = "Componentes",                        # Título eje X
ylab = "% de varianza explicada",            # Título eje Y
main = "Varianza explicada por componentes") # Título del gráfico
# Autovalores
pca_fit$eig
#| message: false
#| warning: false
# Varianza explicada (autovalores)
fviz_eig(pca_fit,
addlabels = TRUE,                            # Añadir el % de varianza explicada
barfill = "#669DA6",                         # Color relleno
barcolor = "#E32986",                        # Color contorno
xlab = "Componentes",                        # Título eje X
ylab = "% de varianza explicada",            # Título eje Y
main = "Varianza explicada por componentes") # Título del gráfico
# Autovalores
pca_fit$eig
cpa_corr <- as.data.frame(pca_fit$var$coord)
cpa_corr <- data.frame(t(cpa_corr))
cpa_corr$Component <-as.factor(rownames(cpa_corr))
# Seleccionar componentes necesarias (4 en nuestro caso)
cpa_corr <- cpa_corr %>% filter(Component %in% c("Dim.1","Dim.2"))
View(cpa_corr)
# Correlaciones.
cpa_corr <- as.data.frame(pca_fit$var$coord)
cpa_corr <- data.frame(t(cpa_corr))
cpa_corr$Component <-as.factor(rownames(cpa_corr))
# Seleccionar componentes necesarias (4 en nuestro caso)
cpa_corr <- cpa_corr %>% filter(Component %in% c("Dim.1","Dim.2"))
# Plot
ggparcoord(cpa_corr,
columns = 1:(ncol(cpa_corr)-1), groupColumn = "Component",
showPoints = TRUE,
scale = "globalminmax",
alphaLines = 1
) +
labs(    title = "Gráfico de correlación",
subtitle = "Coeficientes de correlación entre las variables y componentes")+
#scale_y_continuous(breaks = seq(from = -1, to=1, by=0.1))+
theme_ipsum()+
theme(plot.title = element_text(size=15),
plot.subtitle = element_text(size=10),
axis.line = element_line(color="black", size = 0.5),
panel.grid.major.y =element_line(linetype = "dashed", colour="gray"),
axis.text.x = element_text(face = "bold" , colour = "black", size = 10, angle = 90),
axis.text.y = element_text(face = "bold" , colour = "black", size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position="bottom")
# Autovectores
pca_fit$svd$V
variables <- names(iris_tb)
variables
# Variables
variables <- names(iris_tb)
variables <- variables[variables != "Species"]
# Autovectores (primeros 4)
autovect <- as_tibble(pca_fit$svd$V)
autovect <- autovect %>% select(V1,V2)
# Autovectores con variables
autovect <- tibble(variables, autovect)
autovect
pca_fit$svd$V
# Variables
variables <- names(iris_tb)
variables <- variables[variables != "Species"]
# Autovectores (primeros 4)
autovect <- as_tibble(pca_fit$svd$V)
autovect <- autovect %>% select(V1,V2)
# Autovectores con variables
autovect <- tibble(variables, autovect)
autovect
# Variables
variables <- names(iris_tb)
variables <- variables[variables != "Species"]
# Autovectores (primeros 4)
autovect <- as_tibble(pca_fit$svd$V)
autovect <- autovect %>% select(V1,V2)
# Autovectores con variables
autovect <- tibble(variables, autovect)
autovect
# Scores
scores <- tibble(as_tibble(pca_fit$ind$coord),
"Species" = iris_tb$Species)
# Seleccionamos las 4 primeras componentes
scores <- scores %>% select(Pais,Dim.1,Dim.2)
scores <- tibble(as_tibble(pca_fit$ind$coord),
"Species" = iris_tb$Species)
names(scores)
# Scores
scores <- tibble(as_tibble(pca_fit$ind$coord),
"Species" = iris_tb$Species)
# Seleccionamos las 4 primeras componentes
scores <- scores %>% select(Species,Dim.1,Dim.2)
# Visualizar dataset
datatable(scores , rownames = FALSE, filter = "top",
options = list(pageLength = 10)) |>
formatStyle(names(scores), lineHeight = "65%")
# basic scatterplot
ggplot(scores, aes(x=Dim.1, y=Dim.2)) +
geom_point()+ # Show dots
geom_text(
label= scores$Pais,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
# basic scatterplot
ggplot(scores, aes(x=Dim.1, y=Dim.2)) +
geom_point()+ # Show dots
geom_text(
label= scores$Species,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
# basic scatterplot
ggplot(scores, aes(x=Dim.1, y=Dim.2)) +
geom_point(aes(colour = factor(Species)))
# basic scatterplot
ggplot(scores, aes(x=Dim.1, y=Dim.2)) +
geom_point(aes(colour = factor(Species))) +
scale_fill_discrete(name = "New Legend Title")
# basic scatterplot
ggplot(scores, aes(x=Dim.1, y=Dim.2)) +
geom_point(aes(colour = factor(Species))) +
theme(legend.position = "None")
# basic scatterplot
ggplot(scores, aes(x=Dim.1, y=Dim.2)) +
geom_point(aes(colour = factor(Species)))
# basic scatterplot
ggplot(scores, aes(x=Dim.1, y=Dim.2)) +
geom_point(aes(colour = factor(Species))) + labs(fill = "Dose (mg)")
# basic scatterplot
ggplot(scores,aes(Dim.1, Dim.2, color = Species))+
geom_point(size = 10)+
guides(color = guide_legend(title = "Users By guides"))
# basic scatterplot
ggplot(scores,aes(Dim.1, Dim.2, color = Species))+
geom_point(size = 2)+
guides(color = guide_legend(title = "Users By guides"))
# basic scatterplot
ggplot(scores,aes(Dim.1, Dim.2, color = Species))+
geom_point(size = 2)+
guides(color = guide_legend(title = "Species"))
rm(list = ls())
#| message: false
#| warning: false
rm(list = ls())
# Manejo de datos
library(tidyverse)
# Importar Excel
library(readxl)
# Recopilarción de temas, escalas y utilidades adicionales de ggplot2
library(hrbrthemes)
# Mostrar tablas en HTML (datatable)
library(DT)
# Combinar gráficos
library(gridExtra)
# PCA
library(FactoMineR)
library(factoextra)
# Correlacion
library(corrplot)
# Modelos
library(tidymodels)
# Para grafico de Correlacion CP vs X
library(hrbrthemes)
library(GGally)
library(viridis)
# Datos
cc_adverts <- read_csv("./data/cc_adverts.csv")
View(cc_adverts)
# Datos
cc_adverts <- read_csv("./data/cc_adverts.csv")
View(cc_adverts)
View(cc_adverts)
# Datos
cc_adverts <- read_csv("./data/cc_adverts.csv", delim = ",")
# Datos
cc_adverts <- read_csv("./data/cc_adverts.csv", delim = ";")
#| message: false
#| warning: false
# Datos
cc_adverts <- read_csv("./data/cc_adverts.csv", delim = ";")
#| message: false
#| warning: false
# Datos
cc_adverts <- read_csv("./data/cc_adverts.csv")
View(cc_adverts)
names(cc_adverts)
corrplot(cor(cc_adverts %>% select(-internal_panel_id)), method = "number",
tl.cex=0.65,        # Tamaño variables
tl.col = "black",   # Color variables
number.cex=0.65     # Tamaño númerosd
)
# PCA
pca_fit <- PCA(cc_adverts %>% select(-internal_panel_id), scale.unit = TRUE, ncp = 14, graph = FALSE)
# Autovalores
pca_fit$eig
# Varianza explicada (autovalores)
fviz_eig(pca_fit,
addlabels = TRUE,                            # Añadir el % de varianza explicada
barfill = "#669DA6",                         # Color relleno
barcolor = "#E32986",                        # Color contorno
xlab = "Componentes",                        # Título eje X
ylab = "% de varianza explicada",            # Título eje Y
main = "Varianza explicada por componentes") # Título del gráfico
# Autovalores
pca_fit$eig
# Correlaciones.
cpa_corr <- as.data.frame(pca_fit$var$coord)
cpa_corr <- data.frame(t(cpa_corr))
cpa_corr$Component <-as.factor(rownames(cpa_corr))
# Seleccionar componentes necesarias (4 en nuestro caso)
cpa_corr <- cpa_corr %>% filter(Component %in% c("Dim.1","Dim.2","Dim.3","Dim.4"))
# Plot
ggparcoord(cpa_corr,
columns = 1:(ncol(cpa_corr)-1), groupColumn = "Component",
showPoints = TRUE,
scale = "globalminmax",
alphaLines = 1
) +
labs(    title = "Gráfico de correlación",
subtitle = "Coeficientes de correlación entre las variables y componentes")+
#scale_y_continuous(breaks = seq(from = -1, to=1, by=0.1))+
theme_ipsum()+
theme(plot.title = element_text(size=15),
plot.subtitle = element_text(size=10),
axis.line = element_line(color="black", size = 0.5),
panel.grid.major.y =element_line(linetype = "dashed", colour="gray"),
axis.text.x = element_text(face = "bold" , colour = "black", size = 10, angle = 90),
axis.text.y = element_text(face = "bold" , colour = "black", size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position="bottom")
scores <- tibble(as_tibble(pca_fit$ind$coord),
"internal_panel_id" = cc_adverts$internal_panel_id)
# Scores
scores <- tibble(as_tibble(pca_fit$ind$coord),
"internal_panel_id" = cc_adverts$internal_panel_id)
# Seleccionamos las 4 primeras componentes
scores <- scores %>% select(Pais,Dim.1,Dim.2,Dim.3,Dim.4)
scores <- tibble(as_tibble(pca_fit$ind$coord),
"internal_panel_id" = cc_adverts$internal_panel_id)
# Seleccionamos las 4 primeras componentes
scores <- scores %>% select(internal_panel_id,Dim.1,Dim.2,Dim.3,Dim.4)
# Scores
scores <- tibble(as_tibble(pca_fit$ind$coord),
"internal_panel_id" = cc_adverts$internal_panel_id)
# Seleccionamos las 4 primeras componentes
scores <- scores %>% select(internal_panel_id,Dim.1,Dim.2,Dim.3,Dim.4)
# Visualizar dataset
datatable(scores , rownames = FALSE, filter = "top",
options = list(pageLength = 10)) |>
formatStyle(names(scores), lineHeight = "65%")
# basic scatterplot
ggplot(scores, aes(x=Dim.1, y=Dim.2)) +
geom_point()+ # Show dots
geom_text(
label= scores$Pais,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
# basic scatterplot
ggplot(scores, aes(x=Dim.1, y=Dim.2)) +
geom_point()+ # Show dots
geom_text(
label= scores$internal_panel_id,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
#| message: false
#| warning: false
# Correlaciones.
cpa_corr <- as.data.frame(pca_fit$var$coord)
cpa_corr <- data.frame(t(cpa_corr))
cpa_corr$Component <-as.factor(rownames(cpa_corr))
# Seleccionar componentes necesarias (4 en nuestro caso)
cpa_corr <- cpa_corr %>% filter(Component %in% c("Dim.1","Dim.2","Dim.3","Dim.4"))
# Plot
ggparcoord(cpa_corr,
columns = 1:(ncol(cpa_corr)-1), groupColumn = "Component",
showPoints = TRUE,
scale = "globalminmax",
alphaLines = 1
) +
labs(    title = "Gráfico de correlación",
subtitle = "Coeficientes de correlación entre las variables y componentes")+
#scale_y_continuous(breaks = seq(from = -1, to=1, by=0.1))+
theme_ipsum()+
theme(plot.title = element_text(size=15),
plot.subtitle = element_text(size=10),
axis.line = element_line(color="black", size = 0.5),
panel.grid.major.y =element_line(linetype = "dashed", colour="gray"),
axis.text.x = element_text(face = "bold" , colour = "black", size = 10, angle = 90),
axis.text.y = element_text(face = "bold" , colour = "black", size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position="bottom")
#| message: false
#| warning: false
# Correlaciones.
cpa_corr <- as.data.frame(pca_fit$var$coord)
cpa_corr <- data.frame(t(cpa_corr))
cpa_corr$Component <-as.factor(rownames(cpa_corr))
# Seleccionar componentes necesarias (4 en nuestro caso)
cpa_corr <- cpa_corr %>% filter(Component %in% c("Dim.1","Dim.2","Dim.3","Dim.4","Dim.5"))
# Plot
ggparcoord(cpa_corr,
columns = 1:(ncol(cpa_corr)-1), groupColumn = "Component",
showPoints = TRUE,
scale = "globalminmax",
alphaLines = 1
) +
labs(    title = "Gráfico de correlación",
subtitle = "Coeficientes de correlación entre las variables y componentes")+
#scale_y_continuous(breaks = seq(from = -1, to=1, by=0.1))+
theme_ipsum()+
theme(plot.title = element_text(size=15),
plot.subtitle = element_text(size=10),
axis.line = element_line(color="black", size = 0.5),
panel.grid.major.y =element_line(linetype = "dashed", colour="gray"),
axis.text.x = element_text(face = "bold" , colour = "black", size = 10, angle = 90),
axis.text.y = element_text(face = "bold" , colour = "black", size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position="bottom")
rm(list = ls())
**COMPROBACIÓN ($D=P^{-1}AP$)**
knitr::include_graphics("./imagenes/cambiobase.png")
knitr::include_graphics("./imagenes/ejemploautovect.png")
knitr::include_graphics("./imagenes/ejemplofinal.png")
knitr::include_graphics("./imagenes/ejmplofinal.png")
#| message: false
#| warning: false
rm(list = ls())
# Manejo de datos
library(tidyverse)
# Importar Excel
library(readxl)
# Recopilarción de temas, escalas y utilidades adicionales de ggplot2
library(hrbrthemes)
# Mostrar tablas en HTML (datatable)
library(DT)
# Combinar gráficos
library(gridExtra)
# PCA
library(FactoMineR)
library(factoextra)
# Correlacion
library(corrplot)
# Modelos
library(tidymodels)
# Para grafico de Correlacion CP vs X
library(hrbrthemes)
library(GGally)
library(viridis)
iris_tb <- as_tibble(iris)
#| code-fold: true
#| #| message: false
#| warning: false
ggplot(iris_bi, aes(x = Petal.Length, y = Petal.Width, color = Species)) +
geom_point(size=3) +
theme_ipsum()
# Selección de columnas
iris_bi <- iris_tb %>% select(Petal.Length, Petal.Width, Species)
#| code-fold: true
#| #| message: false
#| warning: false
ggplot(iris_bi, aes(x = Petal.Length, y = Petal.Width, color = Species)) +
geom_point(size=3) +
theme_ipsum()
iris_bi[, 1:2])
iris_bi[, 1:2]
scale(iris_bi[, 1:2])
# Estandarizar
iris_bi_std <- tibble(as_tibble(scale(iris_bi[, 1:2])),
"Species" = iris_bi$Species)
View(iris_bi_std)
#| code-fold: true
#| message: false
#| warning: false
# Ploteo datos originales
g_iris_bi <- ggplot(iris_bi, aes(x = Petal.Length, y = Petal.Width, color = Species)) +
geom_point(size=2) +
theme_ipsum()+
theme(legend.position='none')
# Ploteo datos estandarizados
g_iris_bi_std <- ggplot(iris_bi_std, aes(x = Petal.Length, y = Petal.Width, color = Species)) +
geom_point(size=2) +
theme_ipsum()+
theme(legend.position='none')
# Combinar gráficos
grid.arrange(g_iris_bi, g_iris_bi_std, nrow =1)
# Matriz de varianza-covarianza
cov_mat <- cov(iris_bi_std[, 1:2])
cov_mat
# Matriz de correlación
cor_mat <- cor(iris_bi_std[, 1:2])
cor_mat
# Autovalores y autovectores
auto <- eigen(cor_mat)
# Autovalores
auto$values
# Autovectores
auto$vectors
# Autovectores
auto$vectors
# Autovectores
auto$vectors
# Autovectores
auto$vectors
scores <- tibble(as_tibble(as.matrix(iris_bi_std[, -3]) %*% auto$vectors),
"Species" = iris_bi_std$Species)
View(scores)
scores <- tibble(as_tibble(as.matrix(iris_bi_std[, -3]) %*% auto$vectors),
"Species" = iris_bi_std$Species)
#| message: false
#| warning: false
# Scores
scores <- tibble(as_tibble(as.matrix(iris_bi_std[, -3]) %*% auto$vectors),
"Species" = iris_bi_std$Species)
# Renombramos variables
names(scores) <- c("PC1", "PC2", "Species")
# Visualizar dataset
datatable(scores , rownames = FALSE, filter = "top",
options = list(pageLength = 10)) |>
formatStyle(names(scores), lineHeight = "65%")
#| code-fold: true
#| message: false
#| warning: false
ggplot(scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size=3) +
theme_ipsum()
euro_contam <- read_xlsx("./data/euro_contam.xlsx")
#| message: false
#| warning: false
rm(list = ls())
# Manejo de datos
library(tidyverse)
# Importar Excel
library(readxl)
# Recopilarción de temas, escalas y utilidades adicionales de ggplot2
library(hrbrthemes)
# Mostrar tablas en HTML (datatable)
library(DT)
# Combinar gráficos
library(gridExtra)
# PCA
library(FactoMineR)
library(factoextra)
# Correlacion
library(corrplot)
# Modelos
library(tidymodels)
# Para grafico de Correlacion CP vs X
library(hrbrthemes)
library(GGally)
library(viridis)
euro_contam <- read_xlsx("./data/euro_contam.xlsx")
#| message: false
#| warning: false
rm(list = ls())
# Manejo de datos
library(tidyverse)
# Importar Excel
library(readxl)
# Recopilarción de temas, escalas y utilidades adicionales de ggplot2
library(hrbrthemes)
# Mostrar tablas en HTML (datatable)
library(DT)
# Combinar gráficos
library(gridExtra)
# PCA
library(FactoMineR)
library(factoextra)
# Correlacion
library(corrplot)
# Modelos
library(tidymodels)
# Para grafico de Correlacion CP vs X
library(hrbrthemes)
library(GGally)
library(viridis)
